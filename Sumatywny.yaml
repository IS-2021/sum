openapi: 3.0.2
info:
  title: Sumatywny
  version: 1.0.0
paths:
  /users:
    get:
      tags:
        - users
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
          description: Returns all users
      description: ""
  "/users/{id}":
    description: ""
    get:
      tags:
        - users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
          description: Returns user with given id
        "404":
          $ref: "#/components/responses/NotFound_404"
      description: ""
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInputDTO"
        required: true
      tags:
        - users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
          description: OK
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
      description: ""
    delete:
      tags:
        - users
      responses:
        "204":
          description: Deleted
        "404":
          $ref: "#/components/responses/NotFound_404"
      description: ""
    parameters:
      - name: id
        description: User ID
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /restaurants:
    get:
      tags:
        - restaurants
      parameters:
        - name: name
          description: Filter restaurants by name
          schema:
            type: string
          in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RestaurantDTO"
          description: Returns all restaurants
      description: ""
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestaurantInputDTO"
        required: true
      tags:
        - restaurants
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantDTO"
          description: Restaurant created
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
  /auth/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInputDTO"
        required: true
      tags:
        - auth
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
          description: Created
        "400":
          $ref: "#/components/responses/ProblemDetail"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
  /users/me:
    description: Returns the current user's data
    get:
      tags:
        - users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMeDTO"
          description: Returns the data of the currently logged in user
        "404":
          $ref: "#/components/responses/NotFound_404"
      description: ""
  "/users/{id}/favourites":
    description: ""
    get:
      tags:
        - favourites
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RestaurantDTO"
          description: Returns user's favourite restaurants
      description: ""
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/RestaurantFavouriteInputDTO"
        required: true
      tags:
        - favourites
      responses:
        "200":
          description: OK
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestaurantFavouriteInputDTO"
        required: true
      tags:
        - favourites
      responses:
        "200":
          description: Adds specified by id restaurant to user's favourites
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
      description: ""
    parameters:
      - name: id
        description: User ID
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  "/reports/restaurants/{id}":
    description: ""
    get:
      tags:
        - reports_restaurants
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: Get restaurant report
        "404":
          $ref: "#/components/responses/NotFound_404"
      description: ""
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportDTO"
        required: true
      tags:
        - reports_restaurants
      parameters:
        - name: id
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
              examples:
                restaurant reports:
                  value:
                    cause: Food surplus from event catering
                    restaurant_id: a4cf80a5-9b28-4b3c-a1e7-8fd6e628e85d
                    user_id: 7d4a813d-0bc4-4e7e-97d2-37d15ff90c25
          description: OK
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
    delete:
      tags:
        - reports_restaurants
      parameters:
        - name: id
          schema:
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Deleted
        "404":
          $ref: "#/components/responses/NotFound_404"
    parameters:
      - name: id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /ingredients:
    get:
      tags:
        - ingredients
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IngredientDTO"
          description: Get list of ingredients
      description: ""
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IngredientInputDTO"
        required: true
      tags:
        - ingredients
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientDTO"
          description: Created
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
      description: ""
    parameters:
      - name: mealId
        description: ""
        schema:
          $ref: "#/components/schemas/UUID"
        in: query
        required: false
      - name: restaurantId
        description: ""
        schema:
          $ref: "#/components/schemas/UUID"
        in: query
        required: false
  "/bookings/{id}":
    get:
      tags:
        - bookings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingDTO"
          description: Get booking
        "404":
          $ref: "#/components/responses/NotFound_404"
      description: ""
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingDTO"
        required: true
      tags:
        - bookings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingDTO"
          description: OK
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
      description: ""
    delete:
      tags:
        - bookings
      responses:
        "204":
          description: Deleted
        "404":
          $ref: "#/components/responses/NotFound_404"
      description: ""
    parameters:
      - name: id
        description: Booking ID
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /bookings:
    get:
      tags:
        - bookings
      parameters:
        - name: userId
          description: "If exists, returns booking by userId, eg. /bookings?userId=123"
          schema:
            $ref: "#/components/schemas/UUID"
          in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingDTO"
          description: Get list of bookings
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingInputDTO"
        required: true
      tags:
        - bookings
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingDTO"
          description: Created
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
  /reports/restaurants:
    get:
      tags:
        - reports_restaurants
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportDTO"
          description: Get list of restaurant reports
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportsInputDTO"
        required: true
      tags:
        - reports_restaurants
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: Created
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
          description: Validation failed
  "/ingredients/{id}":
    get:
      tags:
        - ingredients
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientDTO"
              examples:
                ingredient:
                  value:
                    name: Organic Spinach
                    type: Leafy Green
                    ingredient_id: b7f16302-9f97-4bb9-a3bb-fb55ddc5477e
          description: Get ingredient
        "404":
          $ref: "#/components/responses/NotFound_404"
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IngredientInputDTO"
        required: true
      tags:
        - ingredients
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientDTO"
              examples:
                ingredients:
                  value:
                    name: Organic Apple
                    type: Fruit
                    ingredient_id: 0e7f7a5d-ae1b-4d92-bc39-92dc0363a1ff
          description: OK
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
    delete:
      tags:
        - ingredients
      responses:
        "204":
          description: Deleted
        "404":
          $ref: "#/components/responses/NotFound_404"
    parameters:
      - name: id
        description: Ingredient id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /opinions:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OpinionInputDTO"
        required: true
      tags:
        - opinions
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpinionDTO"
              examples:
                opinions:
                  value:
                    user_id: 1a3e6f89-2b4c-567d-8e9a-0123456789ab
                    restaurant_id: ab123456-c789-d012-e345-678f90123456
                    is_positive: true
                    opinion_id: fe901234-5678-abcd-ef12-345678901234
          description: Created
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
  /reports/users:
    get:
      tags:
        - reports_users
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportDTO"
          description: Get list of reported users
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportsInputDTO"
        required: true
      tags:
        - reports_users
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: Created
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
          description: Validation failed
  "/reports/users/{id}":
    description: ""
    get:
      tags:
        - reports_users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: Get user report
        "404":
          $ref: "#/components/responses/NotFound_404"
      description: ""
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportDTO"
        required: true
      tags:
        - reports_users
      parameters:
        - name: id
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: OK
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
    delete:
      tags:
        - reports_users
      parameters:
        - name: id
          schema:
            type: string
          in: path
          required: true
      responses:
        "204":
          description: Deleted
        "404":
          $ref: "#/components/responses/NotFound_404"
    parameters:
      - name: id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /meals:
    get:
      tags:
        - meals
      parameters:
        - name: restaurantId
          description: ""
          schema:
            $ref: "#/components/schemas/UUID"
          in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MealDTO"
          description: Get list of meals
      description: ""
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MealInputDTO"
        required: true
      tags:
        - meals
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MealDTO"
          description: Created
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
  "/meals/{id}":
    get:
      tags:
        - meals
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MealDTO"
          description: Get meal
        "404":
          $ref: "#/components/responses/NotFound_404"
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MealDTO"
        required: true
      tags:
        - meals
      responses:
        "200":
          description: OK
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
      description: ""
    delete:
      tags:
        - meals
      responses:
        "204":
          description: Deleted
        "404":
          $ref: "#/components/responses/NotFound_404"
    parameters:
      - name: id
        description: Meal ID
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /users/delete/favourites:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteFavouriteRestaurantsDTO"
        required: true
      tags:
        - favourites
      responses:
        "204":
          description: Removes specified by id restaurants from user's favourites
        "400":
          $ref: "#/components/responses/BadRequest_400"
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
  "/opinions/{id}":
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OpinionDTO"
        required: true
      tags:
        - opinions
      parameters:
        - name: id
          description: Opinion ID
          schema:
            $ref: "#/components/schemas/UUID"
          in: path
          required: true
      responses:
        "200":
          description: OK
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
    parameters:
      - name: id
        description: Opinion ID
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /admin: {}
  /admin/users:
    get:
      tags:
        - admin_users
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
          description: Get list of users
  /admin/restaurants:
    get:
      tags:
        - admin_restaurants
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RestaurantDTO"
          description: Get list of restaurants.
  "/admin/users/{id}":
    get:
      tags:
        - admin_users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
          description: Get user
        "404":
          $ref: "#/components/responses/NotFound_404"
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
        required: true
      tags:
        - admin_users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
          description: Get user
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          description: Validation failed
    parameters:
      - name: id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  "/admin/restaurants/{id}":
    get:
      tags:
        - admin_restaurants
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantDTO"
          description: Get restaurant
        "404":
          $ref: "#/components/responses/NotFound_404"
    put:
      tags:
        - admin_restaurants
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantDTO"
          description: OK
        "422":
          description: Validation failed
    parameters:
      - name: id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /admin/reports:
    get:
      tags:
        - admin_reports
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportDTO"
          description: Get list of reports
  "/admin/reports/{id}":
    get:
      tags:
        - admin_reports
      parameters:
        - name: id
          schema:
            $ref: "#/components/schemas/UUID"
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: Get report
        "404":
          $ref: "#/components/responses/NotFound_404"
      description: ""
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportDTO"
        required: true
      tags:
        - admin_reports
      parameters:
        - name: id
          schema:
            $ref: "#/components/schemas/UUID"
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: OK
        "422":
          description: Validation failed
    parameters:
      - name: id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  "/restaurants/{id}":
    get:
      tags:
        - restaurants
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantDTO"
          description: Get restaurant
        "404":
          $ref: "#/components/responses/NotFound_404"
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestaurantDTO"
        required: true
      tags:
        - restaurants
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantDTO"
          description: OK
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
    delete:
      tags:
        - restaurants
      responses:
        "204":
          description: Deleted
        "404":
          $ref: "#/components/responses/NotFound_404"
    parameters:
      - name: id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  "/auth/{id}/change-password":
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordDTO"
        required: true
      tags:
        - auth
      responses:
        "200":
          description: Password updated
        "404":
          $ref: "#/components/responses/NotFound_404"
        "422":
          $ref: "#/components/responses/ValidationFailed_422"
    parameters:
      - name: id
        description: User ID
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  "/admin/reports/restaurants/{id}/":
    get:
      tags:
        - admin_reports
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: Report of clicked restaurant
        "404":
          description: not found
    put:
      tags:
        - admin_reports
      parameters:
        - name: ban
          description: |-
            true = ban restaurant and close report
            false = close report
          schema:
            type: boolean
          in: query
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: Return report of clicked restaurant
        "404":
          description: "not found "
    parameters:
      - name: id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /admin/reports/restaurants:
    get:
      tags:
        - admin_reports
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportDTO"
          description: All reports of every restaurant
        "204":
          description: No reports found
  "/admin/reports/users/{id}/":
    get:
      tags:
        - admin_reports
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: Report of clicked user
        "404":
          description: not found
    put:
      tags:
        - admin_reports
      parameters:
        - name: ban
          description: |-
            true = ban user and close
            false = close report
          schema:
            type: boolean
          in: query
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDTO"
          description: Report of clicked user
        "404":
          description: not found
    parameters:
      - name: id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /admin/reports/users/:
    get:
      tags:
        - admin_reports
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportDTO"
          description: All reports of every user
        "204":
          description: No reports found
  /login:
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CredentialsDTO"
        required: true
      tags:
        - auth
      responses:
        "204":
          description: Successful login
        "403":
          description: Invalid credentials
  /logout:
    post:
      tags:
        - auth
      responses:
        "204":
          description: Ends user session
  "/restaurants/images/{id}":
    post:
      requestBody:
        content:
          multipart/form-data: {}
        required: true
      tags:
        - restaurants
      responses:
        "200":
          description: Restaurant image added
        "500":
          description: Bad image cant add
    parameters:
      - name: id
        description: restaurant id
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  "/restaurants/deactivate/{id}":
    put:
      tags:
        - restaurants
      parameters:
        - name: id
          description: ID of restaurant
          schema:
            $ref: "#/components/schemas/UUID"
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantDTO"
          description: Restaurant deactivated
        "400":
          $ref: "#/components/responses/ValidationFailed_422"
      description: Deactivate restaurant by it's ID
  "/restaurants/city/{cityName}":
    get:
      tags:
        - restaurants
      parameters:
        - name: cityName
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RestaurantDTO"
          description: Get restaurants by city
    parameters:
      - name: cityName
        description: City Name
        schema:
          type: string
        in: path
        required: true
  /geo/autocomplete:
    get:
      tags:
        - geo
      parameters:
        - name: query
          description: 'Partial city/street query, such as "War", "Warsz" or "Warszawa"'
          schema:
            type: string
          in: query
          required: true
        - name: sessionToken
          description: >-
            See:
            https://developers.google.com/maps/documentation/places/web-service/session-tokens
          schema:
            $ref: "#/components/schemas/UUID"
          in: query
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AutocompleteDTO"
          description: List of autocompletions
  "/users/{userId}/address":
    post:
      tags:
        - users
      parameters:
        - name: userId
          schema:
            $ref: "#/components/schemas/UUID"
          in: path
          required: true
        - name: placeId
          description: Place ID from Google Maps API
          schema:
            type: string
          in: query
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMeDTO"
          description: City has been set
        "400":
          $ref: "#/components/responses/BadRequest_400"
        "404":
          $ref: "#/components/responses/NotFound_404"
    parameters:
      - name: userId
        schema:
          $ref: "#/components/schemas/UUID"
        in: path
        required: true
  /geo/places:
    get:
      tags:
        - geo
      parameters:
        - name: placeId
          description: Google Maps Place ID
          schema:
            type: string
          in: query
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressDTO"
          description: Returns address of the place
  /geo/reverse-geocode:
    get:
      tags:
        - geo
      parameters:
        - name: lat
          description: ""
          schema:
            type: string
          in: query
          required: true
        - name: lng
          description: ""
          schema:
            type: string
          in: query
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AddressDTO"
          description: Reverse geocoded address
components:
  schemas:
    OpinionDTO:
      description: ""
      required:
        - userId
        - restaurantId
        - isPositive
        - opinionId
      type: object
      properties:
        isPositive:
          description: ""
          type: boolean
        opinionId:
          $ref: "#/components/schemas/UUID"
          description: ""
        restaurantId:
          $ref: "#/components/schemas/UUID"
          description: ""
        userId:
          $ref: "#/components/schemas/UUID"
          description: ""
    MealDTO:
      description: ""
      required:
        - restaurantId
        - name
        - description
        - mealId
      type: object
      properties:
        name:
          description: ""
          type: string
        description:
          description: ""
          type: string
        restaurantId:
          $ref: "#/components/schemas/UUID"
          description: ""
        mealId:
          $ref: "#/components/schemas/UUID"
          description: ""
        ingredients:
          description: List of ingredients
          type: array
          items:
            $ref: "#/components/schemas/IngredientDTO"
    BookingInputDTO:
      description: ""
      required:
        - userId
        - mealId
      type: object
      properties:
        mealId:
          $ref: "#/components/schemas/UUID"
          description: ""
        userId:
          $ref: "#/components/schemas/UUID"
          description: ""
    IngredientInputDTO:
      description: ""
      required:
        - name
        - type
      type: object
      properties:
        name:
          description: ""
          type: string
        type:
          description: ""
          type: string
    HttpException:
      anyOf:
        - required:
            - message
          type: object
          properties:
            message:
              description: ""
              type: string
      description: ""
      type: object
    ReportDTO:
      description: ""
      required:
        - cause
        - restaurantId
        - userId
        - timestamp
        - id
      type: object
      properties:
        cause:
          description: ""
          type: string
        timestamp:
          $ref: "#/components/schemas/timestamp"
          description: ""
          x-faker: time.recent
        id:
          $ref: "#/components/schemas/UUID"
          description: ""
        restaurantId:
          $ref: "#/components/schemas/UUID"
          description: ""
        userId:
          $ref: "#/components/schemas/UUID"
          description: ""
    timestamp:
      description: ""
      type: integer
      example: 1710000000000
      x-faker: time.recent
    IngredientDTO:
      description: ""
      required:
        - name
        - type
        - ingredientId
      type: object
      properties:
        name:
          description: ""
          type: string
          x-faker: name.firstName
        type:
          description: ""
          type: string
        ingredientId:
          $ref: "#/components/schemas/UUID"
          description: ""
          x-faker: datatype.uuid
      example:
        name: Cheese
        type: dairy
        ingredientId: 1488098b-8777-417f-a45a-78c7361502d8
    UserDTO:
      title: Root Type for UserDTO
      description: User object.
      required:
        - email
        - firstName
        - password
        - phoneNumber
        - role
        - secondName
        - username
        - userId
        - isBlocked
      type: object
      properties:
        username:
          type: string
          example: kowalski420
          x-faker: internet.userName
        password:
          format: password
          type: string
          x-faker: internet.password
        email:
          format: email
          type: string
          x-faker: internet.email
        role:
          $ref: "#/components/schemas/Role"
        firstName:
          type: string
          example: Jan
          x-faker: name.firstName
        secondName:
          type: string
          example: Kowalski
          x-faker: name.lastName
        phoneNumber:
          type: string
          example: +48 420-320-210
          x-faker:
            phone.phoneNumber:
              - "###-###-###"
        isBlocked:
          description: ""
          type: boolean
        userId:
          $ref: "#/components/schemas/UUID"
          description: ""
    UserInputDTO:
      title: Root Type for UserDTO
      description: User object.
      required:
        - email
        - firstName
        - password
        - phoneNumber
        - role
        - secondName
        - username
      type: object
      properties:
        username:
          type: string
          example: kowalski420
          x-faker: internet.userName
        password:
          format: password
          type: string
          x-faker: internet.password
        email:
          format: email
          type: string
          x-faker: internet.email
        role:
          $ref: "#/components/schemas/Role"
        firstName:
          type: string
          example: Jan
          x-faker: name.firstName
        secondName:
          type: string
          example: Kowalski
          x-faker: name.lastName
        phoneNumber:
          type: string
          example: +48 420-320-210
          x-faker:
            phone.phoneNumber:
              - "###-###-###"
    PasswordDTO:
      description: ""
      required:
        - password
      type: object
      properties:
        password:
          description: ""
          type: string
    RestaurantInputDTO:
      title: Root Type for RestaurantDTO
      description: ""
      required:
        - addressInputDTO
        - name
        - phoneNumber
        - userId
        - hours
      type: object
      properties:
        name:
          type: string
        phoneNumber:
          type: string
        userId:
          $ref: "#/components/schemas/UUID"
        hours:
          $ref: "#/components/schemas/HoursDTO"
          description: ""
        addressInputDTO:
          $ref: "#/components/schemas/AddressInputDTO"
          description: ""
    CredentialsDTO:
      description: ""
      required:
        - username
        - password
      type: object
      properties:
        username:
          description: ""
          type: string
        password:
          description: ""
          type: string
    BookingDTO:
      description: ""
      required:
        - userId
        - mealId
        - orderedTimestamp
        - id
        - deadlinePickUpTimestamp
        - pickedUpTimestamp
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UUID"
          description: ""
        mealId:
          $ref: "#/components/schemas/UUID"
          description: ""
        pickedUpTimestamp:
          $ref: "#/components/schemas/timestamp"
          description: ""
        id:
          $ref: "#/components/schemas/UUID"
          description: ""
        orderedTimestamp:
          $ref: "#/components/schemas/timestamp"
          description: ""
        deadlinePickUpTimestamp:
          $ref: "#/components/schemas/timestamp"
          description: ""
    DeleteFavouriteRestaurantsDTO:
      description: ""
      required:
        - userId
        - restaurantIds
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UUID"
          description: ""
        restaurantIds:
          description: ""
          type: array
          items:
            $ref: "#/components/schemas/UUID"
    MealInputDTO:
      description: ""
      required:
        - restaurantId
        - name
        - description
      type: object
      properties:
        name:
          description: ""
          type: string
        description:
          description: ""
          type: string
        restaurantId:
          $ref: "#/components/schemas/UUID"
          description: ""
    OpinionInputDTO:
      description: ""
      required:
        - userId
        - restaurantId
        - isPositive
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UUID"
          description: ""
        restaurantId:
          $ref: "#/components/schemas/UUID"
          description: ""
        isPositive:
          description: ""
          type: boolean
    ReportsInputDTO:
      description: ""
      required:
        - cause
        - restaurantId
        - userId
      type: object
      properties:
        cause:
          description: ""
          type: string
        restaurantId:
          $ref: "#/components/schemas/UUID"
          description: ""
          x-faker: datatype.uuid
        userId:
          $ref: "#/components/schemas/UUID"
          description: ""
          x-faker: datatype.uuid
    Role:
      description: ""
      enum:
        - ROLE_ADMIN
        - ROLE_USER
        - ROLE_RESTAURANT
      type: string
    UUID:
      format: uuid
      description: ""
      pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
      type: string
      x-faker: datatype.uuid
    RestaurantDTO:
      title: Root Type for RestaurantDTO
      description: ""
      required:
        - active
        - address
        - restaurantId
        - name
        - phoneNumber
        - userId
        - hours
        - likesCount
        - dislikesCount
      type: object
      properties:
        name:
          type: string
        phoneNumber:
          type: string
        userId:
          $ref: "#/components/schemas/UUID"
        imageUrl:
          description: ""
          type: string
        hours:
          $ref: "#/components/schemas/HoursDTO"
          description: ""
        likesCount:
          description: ""
          type: integer
        dislikesCount:
          description: ""
          type: integer
        address:
          $ref: "#/components/schemas/AddressDTO"
        active:
          type: boolean
        restaurantId:
          $ref: "#/components/schemas/UUID"
    RestaurantFavouriteInputDTO:
      description: ""
      required:
        - restaurantId
      type: object
      properties:
        restaurantId:
          $ref: "#/components/schemas/UUID"
          description: ""
        orderNumber:
          description: ""
          type: integer
    HoursDTO:
      title: Root Type for HoursDTO
      description: ""
      required:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
      type: object
      properties:
        monday:
          type: array
          items:
            type: string
        tuesday:
          type: array
          items:
            type: string
        wednesday:
          type: array
          items:
            type: string
        thursday:
          type: array
          items:
            type: string
        friday:
          type: array
          items:
            type: string
        saturday:
          type: array
          items:
            type: string
        sunday:
          type: array
          items:
            type: string
      example:
        monday:
          - "10:00"
          - "22:00"
        tuesday:
          - "10:00"
          - "22:00"
        wednesday:
          - "10:00"
          - "22:00"
        thursday:
          - "10:00"
          - "22:00"
        friday:
          - "10:00"
          - "24:00"
        saturday:
          - "10:00"
          - "24:00"
        sunday: []
    AddressDTO:
      description: ""
      required:
        - country
        - city
        - street
        - number
        - postalCode
        - addressId
      type: object
      properties:
        country:
          description: ""
          type: string
        street:
          description: ""
          type: string
        number:
          description: ""
          type: string
        postalCode:
          description: ""
          type: string
        addressId:
          description: ""
          type: string
        longitude:
          description: double
          type: number
        latitude:
          description: double
          type: number
        city:
          description: ""
          type: string
    AddressInputDTO:
      description: ""
      required:
        - country
        - street
        - number
        - postalCode
        - cityId
        - latitude
        - longitude
      type: object
      properties:
        country:
          description: ""
          type: string
        street:
          description: ""
          type: string
        number:
          description: ""
          type: string
        postalCode:
          description: ""
          type: string
        cityId:
          $ref: "#/components/schemas/UUID"
          description: ""
        latitude:
          description: double
          type: number
        longitude:
          description: double
          type: number
    ProblemDetail:
      title: Root Type for ProblemDetail
      description: ""
      required:
        - detail
        - title
        - type
        - status
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          format: int32
          type: integer
        detail:
          type: string
        instance:
          type: string
      example:
        type: "about:blank"
        title: Bad Request
        status: 400
        detail: "Phone number: '111222333' already exists."
        instance: /auth/register
    UserMeDTO:
      description: ""
      required:
        - id
        - firstName
        - secondName
        - username
        - email
        - phoneNumber
        - role
      type: object
      properties:
        firstName:
          description: ""
          type: string
        secondName:
          description: ""
          type: string
        username:
          description: ""
          type: string
        email:
          description: ""
          type: string
        phoneNumber:
          description: ""
          type: string
        role:
          $ref: "#/components/schemas/Role"
          description: ""
        id:
          $ref: "#/components/schemas/UUID"
          description: ""
        address:
          $ref: "#/components/schemas/AddressDTO"
          description: ""
    GeoLatLngDTO:
      title: Root Type for GeoLatLngDTO
      description: ""
      required:
        - lat
        - lng
      type: object
      properties:
        lat:
          format: double
          type: number
        lng:
          format: double
          type: number
      example:
        lat: 51.7659423
        lng: 19.4777691
    AutocompleteDTO:
      title: Root Type for AutocompleteDTO
      description: ""
      required:
        - description
        - placeId
      type: object
      properties:
        description:
          type: string
        placeId:
          type: string
      example:
        description: "Warszawa, Polska"
        placeId: ChIJAZ-GmmbMHkcR_NPqiCq-8HI
  responses:
    NotFound_404:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpException"
          examples:
            not_found:
              value:
                message: Not found
      description: Not found
    ValidationFailed_422:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpException"
          examples:
            validation_failed:
              value:
                message: Invalid input data
      description: Validation failed
    BadRequest_400:
      description: Bad requets
    ProblemDetail:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
      description: ""
tags:
  - name: bookings
    description: ""
  - name: ingredients
    description: ""
  - name: opinions
    description: ""
  - name: reports_restaurants
    description: Restaurants reported by users
  - name: restaurants
    description: ""
  - name: users
    description: ""
  - name: reports_users
    description: Users reported by restaurants
  - name: meals
    description: ""
  - name: favourites
    description: ""
  - name: admin_reports
    description: ""
  - name: admin_restaurants
    description: ""
  - name: admin_users
    description: ""
x-json-schema-faker:
  locale: pl
  useExamplesValue: true
  fillProperties: false
