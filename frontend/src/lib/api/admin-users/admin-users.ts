/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Sumatywny
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { computed, unref } from 'vue';
import type { MaybeRef } from 'vue';
import type { GetAdminUsersParams, NotFound404Response, UserDTO, Uuid } from '../../api-model';

export const getAdminUsers = (
  params?: MaybeRef<GetAdminUsersParams>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UserDTO[]>> => {
  params = unref(params);
  return axios.default.get(`http://localhost:9090/admin/users`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetAdminUsersQueryKey = (params?: MaybeRef<GetAdminUsersParams>) => {
  return ['http:', 'localhost:9090', 'admin', 'users', ...(params ? [params] : [])] as const;
};

export const getGetAdminUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdminUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: MaybeRef<GetAdminUsersParams>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsers>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetAdminUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUsers>>> = ({ signal }) =>
    getAdminUsers(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdminUsers>>,
    TError,
    TData
  >;
};

export type GetAdminUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUsers>>>;
export type GetAdminUsersQueryError = AxiosError<unknown>;

export const useGetAdminUsers = <
  TData = Awaited<ReturnType<typeof getAdminUsers>>,
  TError = AxiosError<unknown>,
>(
  params?: MaybeRef<GetAdminUsersParams>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsers>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAdminUsersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putAdminUsers = (
  userDTO: MaybeRef<UserDTO>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  userDTO = unref(userDTO);
  return axios.default.put(`http://localhost:9090/admin/users`, userDTO, options);
};

export const getPutAdminUsersMutationOptions = <
  TError = AxiosError<NotFound404Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAdminUsers>>,
    TError,
    { data: UserDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putAdminUsers>>,
  TError,
  { data: UserDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putAdminUsers>>,
    { data: UserDTO }
  > = (props) => {
    const { data } = props ?? {};

    return putAdminUsers(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutAdminUsersMutationResult = NonNullable<Awaited<ReturnType<typeof putAdminUsers>>>;
export type PutAdminUsersMutationBody = UserDTO;
export type PutAdminUsersMutationError = AxiosError<NotFound404Response>;

export const usePutAdminUsers = <
  TError = AxiosError<NotFound404Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAdminUsers>>,
    TError,
    { data: UserDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putAdminUsers>>,
  TError,
  { data: UserDTO },
  TContext
> => {
  const mutationOptions = getPutAdminUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAdminUsersId = (
  id: MaybeRef<Uuid>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UserDTO>> => {
  id = unref(id);
  return axios.default.get(`http://localhost:9090/admin/users/${id}`, options);
};

export const getGetAdminUsersIdQueryKey = (id: MaybeRef<Uuid>) => {
  return ['http:', 'localhost:9090', 'admin', 'users', id] as const;
};

export const getGetAdminUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdminUsersId>>,
  TError = AxiosError<NotFound404Response>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetAdminUsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUsersId>>> = ({ signal }) =>
    getAdminUsersId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersId>>, TError, TData>;
};

export type GetAdminUsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUsersId>>>;
export type GetAdminUsersIdQueryError = AxiosError<NotFound404Response>;

export const useGetAdminUsersId = <
  TData = Awaited<ReturnType<typeof getAdminUsersId>>,
  TError = AxiosError<NotFound404Response>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAdminUsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};
