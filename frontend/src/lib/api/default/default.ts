/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Sumatywny
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/vue-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { unref } from 'vue';
import type { MaybeRef } from 'vue';
import type { GetOpinionsParams } from '../../api-model';

export const getOpinions = (
  params?: MaybeRef<GetOpinionsParams>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<boolean>> => {
  params = unref(params);
  return axios.default.get(`http://localhost:9090/opinions`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetOpinionsQueryKey = (params?: MaybeRef<GetOpinionsParams>) => {
  return ['http:', 'localhost:9090', 'opinions', ...(params ? [params] : [])] as const;
};

export const getGetOpinionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getOpinions>>,
  TError = AxiosError<unknown>,
>(
  params?: MaybeRef<GetOpinionsParams>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOpinions>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetOpinionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOpinions>>> = ({ signal }) =>
    getOpinions(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOpinions>>,
    TError,
    TData
  >;
};

export type GetOpinionsQueryResult = NonNullable<Awaited<ReturnType<typeof getOpinions>>>;
export type GetOpinionsQueryError = AxiosError<unknown>;

export const useGetOpinions = <
  TData = Awaited<ReturnType<typeof getOpinions>>,
  TError = AxiosError<unknown>,
>(
  params?: MaybeRef<GetOpinionsParams>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getOpinions>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetOpinionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};
