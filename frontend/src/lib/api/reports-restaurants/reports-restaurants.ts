/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Sumatywny
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { computed, unref } from 'vue';
import type { MaybeRef } from 'vue';
import type {
  GetReportsRestaurantsParams,
  HttpException,
  NotFound404Response,
  ReportDTO,
  ReportsInputDTO,
  Uuid,
  ValidationFailed422Response,
} from '../../api-model';

export const getReportsRestaurantsId = (
  id: MaybeRef<Uuid>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReportDTO>> => {
  id = unref(id);
  return axios.default.get(`http://localhost:9090/reports/restaurants/${id}`, options);
};

export const getGetReportsRestaurantsIdQueryKey = (id: MaybeRef<Uuid>) => {
  return ['http:', 'localhost:9090', 'reports', 'restaurants', id] as const;
};

export const getGetReportsRestaurantsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportsRestaurantsId>>,
  TError = AxiosError<NotFound404Response>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReportsRestaurantsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetReportsRestaurantsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReportsRestaurantsId>>> = ({
    signal,
  }) => getReportsRestaurantsId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getReportsRestaurantsId>>, TError, TData>;
};

export type GetReportsRestaurantsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportsRestaurantsId>>
>;
export type GetReportsRestaurantsIdQueryError = AxiosError<NotFound404Response>;

export const useGetReportsRestaurantsId = <
  TData = Awaited<ReturnType<typeof getReportsRestaurantsId>>,
  TError = AxiosError<NotFound404Response>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReportsRestaurantsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetReportsRestaurantsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putReportsRestaurantsId = (
  id: MaybeRef<Uuid>,
  reportDTO: MaybeRef<ReportDTO>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReportDTO>> => {
  id = unref(id);
  reportDTO = unref(reportDTO);
  return axios.default.put(`http://localhost:9090/reports/restaurants/${id}`, reportDTO, options);
};

export const getPutReportsRestaurantsIdMutationOptions = <
  TError = AxiosError<NotFound404Response | ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putReportsRestaurantsId>>,
    TError,
    { id: Uuid; data: ReportDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putReportsRestaurantsId>>,
  TError,
  { id: Uuid; data: ReportDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putReportsRestaurantsId>>,
    { id: Uuid; data: ReportDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return putReportsRestaurantsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutReportsRestaurantsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putReportsRestaurantsId>>
>;
export type PutReportsRestaurantsIdMutationBody = ReportDTO;
export type PutReportsRestaurantsIdMutationError = AxiosError<
  NotFound404Response | ValidationFailed422Response
>;

export const usePutReportsRestaurantsId = <
  TError = AxiosError<NotFound404Response | ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putReportsRestaurantsId>>,
    TError,
    { id: Uuid; data: ReportDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putReportsRestaurantsId>>,
  TError,
  { id: Uuid; data: ReportDTO },
  TContext
> => {
  const mutationOptions = getPutReportsRestaurantsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteReportsRestaurantsId = (
  id: MaybeRef<Uuid>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.default.delete(`http://localhost:9090/reports/restaurants/${id}`, options);
};

export const getDeleteReportsRestaurantsIdMutationOptions = <
  TError = AxiosError<NotFound404Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteReportsRestaurantsId>>,
    TError,
    { id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteReportsRestaurantsId>>,
  TError,
  { id: Uuid },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteReportsRestaurantsId>>,
    { id: Uuid }
  > = (props) => {
    const { id } = props ?? {};

    return deleteReportsRestaurantsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteReportsRestaurantsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteReportsRestaurantsId>>
>;

export type DeleteReportsRestaurantsIdMutationError = AxiosError<NotFound404Response>;

export const useDeleteReportsRestaurantsId = <
  TError = AxiosError<NotFound404Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteReportsRestaurantsId>>,
    TError,
    { id: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteReportsRestaurantsId>>,
  TError,
  { id: Uuid },
  TContext
> => {
  const mutationOptions = getDeleteReportsRestaurantsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getReportsRestaurants = (
  params?: MaybeRef<GetReportsRestaurantsParams>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReportDTO[] | unknown[]>> => {
  params = unref(params);
  return axios.default.get(`http://localhost:9090/reports/restaurants`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetReportsRestaurantsQueryKey = (
  params?: MaybeRef<GetReportsRestaurantsParams>,
) => {
  return [
    'http:',
    'localhost:9090',
    'reports',
    'restaurants',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetReportsRestaurantsQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportsRestaurants>>,
  TError = AxiosError<unknown>,
>(
  params?: MaybeRef<GetReportsRestaurantsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReportsRestaurants>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetReportsRestaurantsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReportsRestaurants>>> = ({ signal }) =>
    getReportsRestaurants(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getReportsRestaurants>>,
    TError,
    TData
  >;
};

export type GetReportsRestaurantsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportsRestaurants>>
>;
export type GetReportsRestaurantsQueryError = AxiosError<unknown>;

export const useGetReportsRestaurants = <
  TData = Awaited<ReturnType<typeof getReportsRestaurants>>,
  TError = AxiosError<unknown>,
>(
  params?: MaybeRef<GetReportsRestaurantsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReportsRestaurants>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetReportsRestaurantsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postReportsRestaurants = (
  reportsInputDTO: MaybeRef<ReportsInputDTO>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReportDTO>> => {
  reportsInputDTO = unref(reportsInputDTO);
  return axios.default.post(`http://localhost:9090/reports/restaurants`, reportsInputDTO, options);
};

export const getPostReportsRestaurantsMutationOptions = <
  TError = AxiosError<HttpException>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postReportsRestaurants>>,
    TError,
    { data: ReportsInputDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postReportsRestaurants>>,
  TError,
  { data: ReportsInputDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postReportsRestaurants>>,
    { data: ReportsInputDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postReportsRestaurants(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostReportsRestaurantsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postReportsRestaurants>>
>;
export type PostReportsRestaurantsMutationBody = ReportsInputDTO;
export type PostReportsRestaurantsMutationError = AxiosError<HttpException>;

export const usePostReportsRestaurants = <
  TError = AxiosError<HttpException>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postReportsRestaurants>>,
    TError,
    { data: ReportsInputDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postReportsRestaurants>>,
  TError,
  { data: ReportsInputDTO },
  TContext
> => {
  const mutationOptions = getPostReportsRestaurantsMutationOptions(options);

  return useMutation(mutationOptions);
};
