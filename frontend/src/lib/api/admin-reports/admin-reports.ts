/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Sumatywny
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { computed, unref } from 'vue';
import type { MaybeRef } from 'vue';
import type { NotFound404Response, ReportDTO, Uuid } from '../../api-model';

export const getAdminReports = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReportDTO[]>> => {
  return axios.default.get(`http://localhost:9090/admin/reports`, options);
};

export const getGetAdminReportsQueryKey = () => {
  return ['http:', 'localhost:9090', 'admin', 'reports'] as const;
};

export const getGetAdminReportsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdminReports>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminReports>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetAdminReportsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminReports>>> = ({ signal }) =>
    getAdminReports({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdminReports>>,
    TError,
    TData
  >;
};

export type GetAdminReportsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminReports>>>;
export type GetAdminReportsQueryError = AxiosError<unknown>;

export const useGetAdminReports = <
  TData = Awaited<ReturnType<typeof getAdminReports>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminReports>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAdminReportsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getAdminReportsId = (
  id: MaybeRef<Uuid>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReportDTO>> => {
  id = unref(id);
  return axios.default.get(`http://localhost:9090/admin/reports/${id}`, options);
};

export const getGetAdminReportsIdQueryKey = (id: MaybeRef<Uuid>) => {
  return ['http:', 'localhost:9090', 'admin', 'reports', id] as const;
};

export const getGetAdminReportsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdminReportsId>>,
  TError = AxiosError<NotFound404Response>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminReportsId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetAdminReportsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminReportsId>>> = ({ signal }) =>
    getAdminReportsId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAdminReportsId>>, TError, TData>;
};

export type GetAdminReportsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdminReportsId>>
>;
export type GetAdminReportsIdQueryError = AxiosError<NotFound404Response>;

export const useGetAdminReportsId = <
  TData = Awaited<ReturnType<typeof getAdminReportsId>>,
  TError = AxiosError<NotFound404Response>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminReportsId>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAdminReportsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putAdminReportsId = (
  id: MaybeRef<Uuid>,
  reportDTO: MaybeRef<ReportDTO>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ReportDTO>> => {
  id = unref(id);
  reportDTO = unref(reportDTO);
  return axios.default.put(`http://localhost:9090/admin/reports/${id}`, reportDTO, options);
};

export const getPutAdminReportsIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAdminReportsId>>,
    TError,
    { id: Uuid; data: ReportDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putAdminReportsId>>,
  TError,
  { id: Uuid; data: ReportDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putAdminReportsId>>,
    { id: Uuid; data: ReportDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return putAdminReportsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutAdminReportsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putAdminReportsId>>
>;
export type PutAdminReportsIdMutationBody = ReportDTO;
export type PutAdminReportsIdMutationError = AxiosError<void>;

export const usePutAdminReportsId = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAdminReportsId>>,
    TError,
    { id: Uuid; data: ReportDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putAdminReportsId>>,
  TError,
  { id: Uuid; data: ReportDTO },
  TContext
> => {
  const mutationOptions = getPutAdminReportsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
