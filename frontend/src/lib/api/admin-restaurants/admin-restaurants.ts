/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Sumatywny
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { computed, unref } from 'vue';
import type { MaybeRef } from 'vue';
import type {
  GetAdminRestaurantsParams,
  NotFound404Response,
  PutAdminRestaurantsIdParams,
  RestaurantDTO,
  Uuid,
} from '../../api-model';

export const getAdminRestaurants = (
  params?: MaybeRef<GetAdminRestaurantsParams>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RestaurantDTO[]>> => {
  params = unref(params);
  return axios.default.get(`http://localhost:9090/admin/restaurants`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetAdminRestaurantsQueryKey = (params?: MaybeRef<GetAdminRestaurantsParams>) => {
  return ['http:', 'localhost:9090', 'admin', 'restaurants', ...(params ? [params] : [])] as const;
};

export const getGetAdminRestaurantsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdminRestaurants>>,
  TError = AxiosError<unknown>,
>(
  params?: MaybeRef<GetAdminRestaurantsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminRestaurants>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetAdminRestaurantsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRestaurants>>> = ({ signal }) =>
    getAdminRestaurants(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdminRestaurants>>,
    TError,
    TData
  >;
};

export type GetAdminRestaurantsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdminRestaurants>>
>;
export type GetAdminRestaurantsQueryError = AxiosError<unknown>;

export const useGetAdminRestaurants = <
  TData = Awaited<ReturnType<typeof getAdminRestaurants>>,
  TError = AxiosError<unknown>,
>(
  params?: MaybeRef<GetAdminRestaurantsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminRestaurants>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAdminRestaurantsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getAdminRestaurantsId = (
  id: MaybeRef<Uuid>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RestaurantDTO>> => {
  id = unref(id);
  return axios.default.get(`http://localhost:9090/admin/restaurants/${id}`, options);
};

export const getGetAdminRestaurantsIdQueryKey = (id: MaybeRef<Uuid>) => {
  return ['http:', 'localhost:9090', 'admin', 'restaurants', id] as const;
};

export const getGetAdminRestaurantsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdminRestaurantsId>>,
  TError = AxiosError<NotFound404Response>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminRestaurantsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetAdminRestaurantsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRestaurantsId>>> = ({ signal }) =>
    getAdminRestaurantsId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAdminRestaurantsId>>, TError, TData>;
};

export type GetAdminRestaurantsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdminRestaurantsId>>
>;
export type GetAdminRestaurantsIdQueryError = AxiosError<NotFound404Response>;

export const useGetAdminRestaurantsId = <
  TData = Awaited<ReturnType<typeof getAdminRestaurantsId>>,
  TError = AxiosError<NotFound404Response>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdminRestaurantsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAdminRestaurantsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

/**
 * @summary Updates restaurant status
 */
export const putAdminRestaurantsId = (
  id: MaybeRef<Uuid>,
  params: MaybeRef<PutAdminRestaurantsIdParams>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RestaurantDTO>> => {
  id = unref(id);
  params = unref(params);
  return axios.default.put(`http://localhost:9090/admin/restaurants/${id}`, undefined, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getPutAdminRestaurantsIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAdminRestaurantsId>>,
    TError,
    { id: Uuid; params: PutAdminRestaurantsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putAdminRestaurantsId>>,
  TError,
  { id: Uuid; params: PutAdminRestaurantsIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putAdminRestaurantsId>>,
    { id: Uuid; params: PutAdminRestaurantsIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putAdminRestaurantsId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutAdminRestaurantsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putAdminRestaurantsId>>
>;

export type PutAdminRestaurantsIdMutationError = AxiosError<void>;

/**
 * @summary Updates restaurant status
 */
export const usePutAdminRestaurantsId = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAdminRestaurantsId>>,
    TError,
    { id: Uuid; params: PutAdminRestaurantsIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putAdminRestaurantsId>>,
  TError,
  { id: Uuid; params: PutAdminRestaurantsIdParams },
  TContext
> => {
  const mutationOptions = getPutAdminRestaurantsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
