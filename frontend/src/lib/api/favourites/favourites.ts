/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Sumatywny
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { computed, unref } from 'vue';
import type { MaybeRef } from 'vue';
import type {
  DeleteFavouriteRestaurantsDTO,
  NotFound404Response,
  RestaurantDTO,
  Uuid,
  ValidationFailed422Response,
} from '../../api-model';

export const getUsersIdFavourites = (
  id: MaybeRef<Uuid>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RestaurantDTO[]>> => {
  id = unref(id);
  return axios.default.get(`http://localhost:9090/users/${id}/favourites`, options);
};

export const getGetUsersIdFavouritesQueryKey = (id: MaybeRef<Uuid>) => {
  return ['http:', 'localhost:9090', 'users', id, 'favourites'] as const;
};

export const getGetUsersIdFavouritesQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersIdFavourites>>,
  TError = AxiosError<unknown>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersIdFavourites>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetUsersIdFavouritesQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersIdFavourites>>> = ({ signal }) =>
    getUsersIdFavourites(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getUsersIdFavourites>>, TError, TData>;
};

export type GetUsersIdFavouritesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersIdFavourites>>
>;
export type GetUsersIdFavouritesQueryError = AxiosError<unknown>;

export const useGetUsersIdFavourites = <
  TData = Awaited<ReturnType<typeof getUsersIdFavourites>>,
  TError = AxiosError<unknown>,
>(
  id: MaybeRef<Uuid>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersIdFavourites>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsersIdFavouritesQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postUsersIdFavourites = (
  id: MaybeRef<Uuid>,
  uuid: MaybeRef<Uuid>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  uuid = unref(uuid);
  return axios.default.post(`http://localhost:9090/users/${id}/favourites`, uuid, options);
};

export const getPostUsersIdFavouritesMutationOptions = <
  TError = AxiosError<NotFound404Response | ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersIdFavourites>>,
    TError,
    { id: Uuid; data: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersIdFavourites>>,
  TError,
  { id: Uuid; data: Uuid },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersIdFavourites>>,
    { id: Uuid; data: Uuid }
  > = (props) => {
    const { id, data } = props ?? {};

    return postUsersIdFavourites(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersIdFavouritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersIdFavourites>>
>;
export type PostUsersIdFavouritesMutationBody = Uuid;
export type PostUsersIdFavouritesMutationError = AxiosError<
  NotFound404Response | ValidationFailed422Response
>;

export const usePostUsersIdFavourites = <
  TError = AxiosError<NotFound404Response | ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersIdFavourites>>,
    TError,
    { id: Uuid; data: Uuid },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postUsersIdFavourites>>,
  TError,
  { id: Uuid; data: Uuid },
  TContext
> => {
  const mutationOptions = getPostUsersIdFavouritesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postUsersDeleteFavourites = (
  deleteFavouriteRestaurantsDTO: MaybeRef<DeleteFavouriteRestaurantsDTO>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  deleteFavouriteRestaurantsDTO = unref(deleteFavouriteRestaurantsDTO);
  return axios.default.post(
    `http://localhost:9090/users/delete/favourites`,
    deleteFavouriteRestaurantsDTO,
    options,
  );
};

export const getPostUsersDeleteFavouritesMutationOptions = <
  TError = AxiosError<ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersDeleteFavourites>>,
    TError,
    { data: DeleteFavouriteRestaurantsDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersDeleteFavourites>>,
  TError,
  { data: DeleteFavouriteRestaurantsDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersDeleteFavourites>>,
    { data: DeleteFavouriteRestaurantsDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postUsersDeleteFavourites(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersDeleteFavouritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersDeleteFavourites>>
>;
export type PostUsersDeleteFavouritesMutationBody = DeleteFavouriteRestaurantsDTO;
export type PostUsersDeleteFavouritesMutationError = AxiosError<ValidationFailed422Response>;

export const usePostUsersDeleteFavourites = <
  TError = AxiosError<ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersDeleteFavourites>>,
    TError,
    { data: DeleteFavouriteRestaurantsDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postUsersDeleteFavourites>>,
  TError,
  { data: DeleteFavouriteRestaurantsDTO },
  TContext
> => {
  const mutationOptions = getPostUsersDeleteFavouritesMutationOptions(options);

  return useMutation(mutationOptions);
};
