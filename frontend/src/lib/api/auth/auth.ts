/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Sumatywny
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/vue-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from '@tanstack/vue-query';
import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { unref } from 'vue';
import type { MaybeRef } from 'vue';
import type {
  CredentialsDTO,
  NotFound404Response,
  PasswordDTO,
  ProblemDetailResponse,
  UserDTO,
  UserInputDTO,
  Uuid,
  ValidationFailed422Response,
} from '../../api-model';

export const postAuthRegister = (
  userInputDTO: MaybeRef<UserInputDTO>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UserDTO>> => {
  userInputDTO = unref(userInputDTO);
  return axios.default.post(`http://localhost:9090/auth/register`, userInputDTO, options);
};

export const getPostAuthRegisterMutationOptions = <
  TError = AxiosError<ProblemDetailResponse | ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    { data: UserInputDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: UserInputDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthRegister>>,
    { data: UserInputDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthRegister(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>;
export type PostAuthRegisterMutationBody = UserInputDTO;
export type PostAuthRegisterMutationError = AxiosError<
  ProblemDetailResponse | ValidationFailed422Response
>;

export const usePostAuthRegister = <
  TError = AxiosError<ProblemDetailResponse | ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    { data: UserInputDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: UserInputDTO },
  TContext
> => {
  const mutationOptions = getPostAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const putAuthIdChangePassword = (
  id: MaybeRef<Uuid>,
  passwordDTO: MaybeRef<PasswordDTO>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  passwordDTO = unref(passwordDTO);
  return axios.default.put(
    `http://localhost:9090/auth/${id}/change-password`,
    passwordDTO,
    options,
  );
};

export const getPutAuthIdChangePasswordMutationOptions = <
  TError = AxiosError<NotFound404Response | ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAuthIdChangePassword>>,
    TError,
    { id: Uuid; data: PasswordDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putAuthIdChangePassword>>,
  TError,
  { id: Uuid; data: PasswordDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putAuthIdChangePassword>>,
    { id: Uuid; data: PasswordDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return putAuthIdChangePassword(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutAuthIdChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof putAuthIdChangePassword>>
>;
export type PutAuthIdChangePasswordMutationBody = PasswordDTO;
export type PutAuthIdChangePasswordMutationError = AxiosError<
  NotFound404Response | ValidationFailed422Response
>;

export const usePutAuthIdChangePassword = <
  TError = AxiosError<NotFound404Response | ValidationFailed422Response>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAuthIdChangePassword>>,
    TError,
    { id: Uuid; data: PasswordDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putAuthIdChangePassword>>,
  TError,
  { id: Uuid; data: PasswordDTO },
  TContext
> => {
  const mutationOptions = getPutAuthIdChangePasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postLogin = (
  credentialsDTO: MaybeRef<CredentialsDTO>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  const formUrlEncoded = new URLSearchParams();
  const unrefedCredentialsDTO = unref(credentialsDTO);
  formUrlEncoded.append('username', unrefedCredentialsDTO.username);
  formUrlEncoded.append('password', unrefedCredentialsDTO.password);

  credentialsDTO = unref(credentialsDTO);
  return axios.default.post(`http://localhost:9090/login`, formUrlEncoded, options);
};

export const getPostLoginMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: CredentialsDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: CredentialsDTO },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    { data: CredentialsDTO }
  > = (props) => {
    const { data } = props ?? {};

    return postLogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postLogin>>>;
export type PostLoginMutationBody = CredentialsDTO;
export type PostLoginMutationError = AxiosError<void>;

export const usePostLogin = <TError = AxiosError<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: CredentialsDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: CredentialsDTO },
  TContext
> => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postLogout = (options?: AxiosRequestConfig): Promise<AxiosResponse<void>> => {
  return axios.default.post(`http://localhost:9090/logout`, undefined, options);
};

export const getPostLogoutMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postLogout>>, TError, void, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postLogout>>, TError, void, TContext> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLogout>>, void> = () => {
    return postLogout(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postLogout>>>;

export type PostLogoutMutationError = AxiosError<unknown>;

export const usePostLogout = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postLogout>>, TError, void, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<Awaited<ReturnType<typeof postLogout>>, TError, void, TContext> => {
  const mutationOptions = getPostLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
